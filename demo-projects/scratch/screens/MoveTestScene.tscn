[gd_scene load_steps=17 format=2]

[ext_resource path="res://screens/MoveTestScene.cs" type="Script" id=1]
[ext_resource path="res://asset/fish/Fish1.obj" type="ArrayMesh" id=2]

[sub_resource type="SphereMesh" id=1]

[sub_resource type="CapsuleShape" id=2]
radius = 3.0
height = 6.0

[sub_resource type="Shader" id=6]
code = "shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx
,skip_vertex_transform
,shadows_disabled
,unshaded
;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;





uniform vec4 outline_color: hint_color = vec4(1,0,0,0);
uniform float outline_strength = 1.0;

varying vec3 p;

float gridFactor (vec2 parameter, float width) {
  vec2 d = fwidth(parameter);
  vec2 looped = 0.5 - abs(mod(parameter, 1.0) - 0.5);
  vec2 a2 = smoothstep(d * (width - 0.5), d * (width + 0.5), looped);
  return min(a2.x, a2.y);
}

varying flat vec3 _tangent;

void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
	//UV = UV * vec2(1);
	
	
	
	_tangent = TANGENT;
	
	_tangent = NORMAL;
	//_tangent = BINORMAL;
	_tangent = UV.xyx;
	
	VERTEX = (MODELVIEW_MATRIX * vec4(VERTEX, 1.0)).xyz;
	
 //precision mediump float;
    //uniform mat4 projection, view;
    //attribute vec3 position;
    //attribute vec2 barycentric;
    
	
    
    //p = VERTEX;
	//vec4 tmp  = PROJECTION_MATRIX * CAMERA_MATRIX * vec4(VERTEX,1);
	//VERTEX = tmp.xyz;
//	POSITION = vec4(VERTEX,1);
//	POSITION.xyz = VERTEX.xyz;
//	POSITION.z=1.0;
//	POSITION = tmp;
    //gl_Position = projection * view * vec4(position, 1);
    

}

void fragment() {
	
    //ALBEDO = outline_color.rgb;
    //ALPHA = dot(NORMAL, vec3(0,0,1)) * outline_strength;
  //#pragma glslify: grid = require(../cartesian/scaled)
	//ALBEDO = VERTEX;
	//ALBEDO = vec3(1,0,0);
	
	//float grid_color = gridFactor(p.xy * 5.0, 1.0);	
	//ALBEDO = vec3(grid_color);
	
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	METALLIC = metallic;
	ROUGHNESS = roughness;
	SPECULAR = specular;
	ALBEDO = COLOR.rgb;
	ALBEDO = _tangent;
	//ALBEDO = NORMAL;
	ALBEDO = SCREEN_UV.yyy;
	ALBEDO=UV.xxx;
	//RIM=0.0;
	ALBEDO=FRAGCOORD.zzz;
	
	///float x = SCREEN_PIXEL_SIZE;
}

void light() {
// Output:0

}



"

[sub_resource type="ShaderMaterial" id=7]
shader = SubResource( 6 )
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/roughness = 1.0
shader_param/point_size = 1.0
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )
shader_param/outline_color = Color( 1, 0, 0, 0 )
shader_param/outline_strength = 1.0

[sub_resource type="CylinderMesh" id=11]

[sub_resource type="Shader" id=8]
code = "shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx
,unshaded
//,skip_vertex_transform
//,world_vertex_coords
;
uniform vec4 albedo : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float specular;
uniform float metallic;
uniform float roughness : hint_range(0,1);
uniform float point_size : hint_range(0,128);
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


varying vec2 vpos;

varying vec4 vertex_x;
vec3 cartesian_to_barycentric (vec2 p, vec2 a, vec2 b, vec2 c) {
	float l0 = ((b.y-c.y)*(p.x-c.x) + (c.x-b.x)*(p.y-c.y))
	/ ((b.y-c.y)*(a.x-c.x)+(c.x-b.x)*(a.y-c.y));
	float l1 = ((c.y-a.y)*(p.x-c.x)+(a.x-c.x)*(p.y-c.y))
	/ ((b.y-c.y)*(a.x-c.x)+(c.x-b.x)*(a.y-c.y));
	return vec3(l0, l1, 1.0 - l0 - l1);
}

void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
//	POSITION
	vpos = VERTEX.xy;
//	vertex_pos = VERTEX;
//      gl_Position = vec4(position,0,1);
//

vertex_x = (PROJECTION_MATRIX * vec4(VERTEX, 1.0));//.xyz;
//vertex_x = (INV_PROJECTION_MATRIX * vec4(VERTEX, 1.0));//.xyz;
//VERTEX = (MODELVIEW_MATRIX * vec4(VERTEX, 1.0)).xyz;

COLOR = vec4(VERTEX.xyz,1);

COLOR = vec4(UV.xy,1,1);
}




void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
//	METALLIC = metallic;
//	ROUGHNESS = roughness;
//	SPECULAR = specular;
      vec2 p0 = vec2(-0.5,+0.1);
      vec2 p1 = vec2(+0.6,+0.5);
      vec2 p2 = vec2(-0.2,-0.3);
	
	
	
	
      vec3 bc = cartesian_to_barycentric(vpos, p0, p1, p2);  
      if (max(bc.x,max(bc.y,bc.z)) > 1.0) discard;
      if (min(bc.x,min(bc.y,bc.z)) < 0.0) discard;
      ALBEDO = vec3(bc*0.5+0.5);  //from https://github.com/glslify/glsl-cartesian-to-barycentric, it seems to show tangental 
		//ALPHA=0.2;
		
		
	
//	ALBEDO = VERTEX.yyy;  //screen space
//	//ALBEDO = vertex_x.xyz;  //world space
//
//	vec3 temp = vec3(bc*0.5+0.5);
//
//	temp = vertex_x.xyz;
//	temp = temp -0.5;
//	temp = abs(temp);
//	temp = temp + 0.5;
//	///ALBEDO = temp.zzz;
//	//ALPHA = step(1.5,temp).b;
//	//ALPHA_SCISSOR
//
//
//	ALBEDO = vertex_x.xyz;
//	ALBEDO = COLOR.rgb;
//	//ALBEDO = VERTEX;
	
}
"

[sub_resource type="ShaderMaterial" id=9]
shader = SubResource( 8 )
shader_param/albedo = Color( 1, 1, 1, 1 )
shader_param/specular = 0.5
shader_param/metallic = 0.0
shader_param/roughness = 1.0
shader_param/point_size = 1.0
shader_param/uv1_scale = Vector3( 1, 1, 1 )
shader_param/uv1_offset = Vector3( 0, 0, 0 )
shader_param/uv2_scale = Vector3( 1, 1, 1 )
shader_param/uv2_offset = Vector3( 0, 0, 0 )

[sub_resource type="CubeMesh" id=10]

[sub_resource type="VisualShaderNodeInput" id=12]
input_name = "screen_texture"

[sub_resource type="VisualShaderNodeInput" id=13]
output_port_for_preview = 0
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeTexture" id=14]
output_port_for_preview = 1
source = 5

[sub_resource type="VisualShader" id=15]
code = "shader_type spatial;



void vertex() {
// Output:0

}

void fragment() {
// Input:3
	vec3 n_out3p0;
	n_out3p0 = vec3(SCREEN_UV,0.0);

// Input:2

// Texture:4
	vec3 n_out4p0;
	float n_out4p1;
	{
		vec4 SCREEN_TEXTURE_tex_read = texture( SCREEN_TEXTURE , n_out3p0.xy );
		n_out4p0 = SCREEN_TEXTURE_tex_read.rgb;
		n_out4p1 = SCREEN_TEXTURE_tex_read.a;
	}

// Output:0
	ALBEDO = n_out4p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -41.3, -645 )
nodes/fragment/0/position = Vector2( 1264, -247 )
nodes/fragment/2/node = SubResource( 12 )
nodes/fragment/2/position = Vector2( 52.1, -154.1 )
nodes/fragment/3/node = SubResource( 13 )
nodes/fragment/3/position = Vector2( 57, -345 )
nodes/fragment/4/node = SubResource( 14 )
nodes/fragment/4/position = Vector2( 575, -345 )
nodes/fragment/connections = PoolIntArray( 3, 0, 4, 0, 4, 0, 0, 0, 2, 0, 4, 2 )

[sub_resource type="ShaderMaterial" id=16]
shader = SubResource( 15 )

[sub_resource type="CubeMesh" id=17]

[node name="Spatial" type="Spatial"]
script = ExtResource( 1 )

[node name="FishTarget" type="MeshInstance" parent="."]
transform = Transform( -0.965926, -0.183013, -0.183013, 0, -0.707107, 0.707107, -0.258819, 0.683013, 0.683013, 0.999998, -2, -4 )
mesh = SubResource( 1 )
material/0 = null

[node name="Camera" type="Camera" parent="."]

[node name="DummyFish" type="Spatial" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -12, 0, 0 )

[node name="CollisionShape" type="CollisionShape" parent="DummyFish"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1 )
shape = SubResource( 2 )

[node name="MeshInstance" type="MeshInstance" parent="DummyFish"]
mesh = ExtResource( 2 )

[node name="StaticBody" type="StaticBody" parent="."]

[node name="SkipVertexTransformTest" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 28, 0 )
material_override = SubResource( 7 )
mesh = SubResource( 11 )
material/0 = null

[node name="MeshInstance2" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 28, 16, 0 )
material_override = SubResource( 9 )
mesh = SubResource( 10 )
material/0 = null

[node name="VisualShaderTest" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -6 )
material_override = SubResource( 16 )
mesh = SubResource( 17 )
material/0 = null
